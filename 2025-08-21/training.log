Morning meeting completed

Installed MongoDB Compass & explored features

Completed environment setup: VS Code, IPython, Git, MongoDB, Mongosh, Compass

Revised Python basics (indentation, data types, control flow, functions, OOP)

Python Tasks Completed

Task 1: Student Marks & Report Generator

Task 2: Grocery Store – Data Organizer

MongoDB & Compass Tasks Completed


Section 1: Basics – Database & Collection Operations
Task: MongoDB Create and Explore
Part 1: Insert, Update, Delete, Bulk Insert
Step 1: Create and Insert
Create a database called companyDB and a collection named employees.
Insert one employee document manually:
{
  "empId": 101,
  "name": "Ravi",
  "department": "IT",
  "salary": 75000,
  "isActive": true
}

ANS:
use companyDB

db.employees.insertOne({
  "empId": 101,
  "name": "Ravi",
  "department": "IT",
  "salary": 75000,
  "isActive": true
})


Step 2: Bulk Insert
Prepare and insert at least 5 more employee documents using a bulk insert (array of documents).

ANS:
db.employees.insertMany
([
  { "empId": 102, "name": "Anitta", "department": "HR", "salary": 75000, "isActive": true },
  { "empId": 103, "name": "Jofin", "department": "Finance", "salary": 90000, "isActive": false },
  { "empId": 104, "name": "Sheela", "department": "IT", "salary": 60000, "isActive": true },
  { "empId": 105, "name": "Shaji", "department": "Marketing", "salary": 30000, "isActive": true },
  { "empId": 106, "name": "Sefin", "department": "IT", "salary": 70000, "isActive": false },
  { "empId": 102, "name": "mariya", "department": "HR", "salary": 75000, "isActive": true },
  { "empId": 103, "name": "Johnson", "department": "Finance", "salary": 90000, "isActive": false },
  { "empId": 104, "name": "Suma", "department": "IT", "salary": 60000, "isActive": true },
  { "empId": 105, "name": "Seena", "department": "Marketing", "salary": 30000, "isActive": true },
  { "empId": 106, "name": "Sayi", "department": "IT", "salary": 70000, "isActive": false }

])


Step 3: Update
Update the salary of all employees in the IT department by 10%.

ANS:
db.employees.updateMany(
  { department: "IT" },
  { $mul: { salary: 1.10 } }
)


Step 4: Delete
Delete the record of any employee who is marked as IsActive: false.

ANS:
db.employees.deleteMany({ isActive: false })

Part 2: Exporting, Importing, Dumping, and Restore
Step 5: Export
Export the employees collection to a JSON & CSV file using  the mongoexport command.

ANS:
# Export to JSON
mongoexport --db=companyDB --collection=employees --out=employees.json

# Export to CSV
mongoexport --db=companyDB --collection=employees --type=csv --fields=empId,name,department,salary,isActive --out=employees.csv


Step 6: Dump
Create a full database dump of companyDB using mongodump.

ANS:
mongodump --db=companyDB --out=backup/companyDB_dump

Step 7: Drop the Database
Drop the companyDB database from MongoDB.

ANS:
use companyDB
db.dropDatabase()

Step 8: Restore
Use mongorestore to restore the database from the dump created in Step 6.

ANS:
mongorestore --db=companyDB backup/companyDB_dump/companyDB

Step 9: Import
Import a sample employee data JSON or CSV into a new collection called importedEmployees.

ANS:
mongoimport --db=companyDB --collection=importedEmployees --file=employees.json --jsonArray

Part 3: Indexing
Step 10: Create Index
Create a single field index on the department field.
ANS:
db.employees.createIndex({ department: 1 })


Step 11: Compound Index
Create a compound index on department and salary.
ANS:
db.employees.createIndex({ department: 1, salary: -1 })

Step 12: Validate
Use .getIndexes() to get all the indexes in a Collection
Ans:
db.employees.getIndexes()


Part 4: Sharding, Clustering, and Nodes (Theory)
Step 13: Basic Understanding (Theory / Notes)
Write a short explanation of the following:


What is sharding in MongoDB?
ANS:
Sharding is the process of splitting large data sets across multiple servers (shards).
It helps MongoDB handle very large data and high traffic.
Data is divided using a shard key.
Each shard stores only part of the data, but together they make up the full database.
Used for horizontal scaling (adding more machines instead of upgrading one machine).

What is a replica set?
ANS:
A replica set is a group of MongoDB servers that keep the same copy of data.
Provides high availability and fault tolerance.
If one server fails, another server takes over automatically.
It usually has one primary and multiple secondary nodes.

What are a primary node and a secondary node?
ANS:
Primary Node:
Handles all write operations.
Syncs changes to secondary nodes.

Secondary Node(s):
Copy data from the primary.
Used for read operations (if enabled).
Can become primary during a failover (automatic election).

art 5: Object ID & time stamp
Step 13: What is objectID and timestamp from an object?
Get the objectId and convert into a timestamp and wise versa- it’s importance(time bounded data identification)
ANS:
A unique identifier MongoDB gives to every document (_id).
12-byte value:
4 bytes = timestamp
5 bytes = machine ID & process ID
3 bytes = counter

Extract timestamp from ObjectId
let doc = db.employees.findOne()
doc._id.getTimestamp()

reate ObjectId from timestamp
ObjectId(Math.floor(new Date("2024-08-20")/1000).toString(16) + "0000000000000000")


#######################################################################################################################################################3
Section 2: MongoDB Compass


Task : MongoDB Compass
Part 1: Install MongoDB Compass and connect
Step 1: connect to mongodb
Install mongodb compass
Connect to a local host collection

Step 2: Verify Structure
Use "Documents" tab to browse data.
Use "Schema" tab to analyze the field types and distributions.
Identify any data type mismatches or missing fields.



art 2: Search and Filtering (Querying)
Step 3: Filter Data Using Query
Use the filter bar to:
1.Find all employees from the "HR" department.
2.Find employees with salary greater than 50000.
3.Find employees who joined after 2022-01-01.

ANS:
{ "department": "HR" }
{ "salary": { "$gt": 50000 } }
{ "joinDate": { "$gt": ISODate("2022-01-01") } }


Step 4: Combine Conditions
Query to find employees who are:
1.Active (isActive: true)
2.Belong to either "HR" or "IT" departments.
Bonus: Use the $or and $and operators.

ANS:
{
  "$and": [
    { "isActive": true },
    { "$or": [ { "department": "HR" }, { "department": "IT" } ] }
  ]
}


Part 3: CRUD Operations in Compass
Step 5: Perform Updates
Use the Update Document option to:
Change the department of one employee.
Increase salary of all employees in "Sales" by 10,000 using Update Many.

ANS:
1.Update single document:
Select a document → Edit Document → change department value.
2.Update Many (e.g., Sales salary +10,000):
Use Update Many → Filter: { "department": "Sales" } → Update:
{ "$inc": { "salary": 10000 } }


Step 6: Deletion
Delete a document using Delete button.
Use Delete Many to remove all inactive employees.

ANS:
1.Delete single document → Click Delete button on the document.
2.Delete Many inactive employees:
Filter: { "isActive": false } → Click Delete Many.


Part 4: Aggregation Pipeline Builder
Step 7: Aggregation – Department-wise Salary Stats
Open the Aggregation tab.
Create a pipeline with these stages:
1.$group by department
2.Calculate avgSalary, maxSalary, minSalary using $avg, $max, $min

ANS:
{
  "_id": "$department",
  "avgSalary": { "$avg": "$salary" },
  "maxSalary": { "$max": "$salary" },
  "minSalary": { "$min": "$salary" }
}



Step 8: Aggregation – Filter + Sort
Add these stages:
1.$match employees with salary > 50000
2.sort by salary descending
ANS:
{ "salary": { "$gt": 50000 } }
{ "salary": -1 }


Step 9: Aggregation – Project Fields
Use $project to display:
Only name, salary, and department
Add a new computed field: annualSalary = salary * 12

ANS:
{
  "name": 1,
  "salary": 1,
  "department": 1,
  "annualSalary": { "$multiply": ["$salary", 12] }
}


Part 5: Schema Analysis & Indexes
Step 10: Analyze Schema
Open Schema tab.
Analyze:
Which fields are always present or optional?
Check for any inconsistent data types (e.g., age as string in some docs).


ANS:
1. Fields always present:
   - empId, name, department, salary, isActive
2. Optional fields:
   - joinDate, address
3. Inconsistent data types:
   - Check if age is stored as string in some documents.  



Step 11: Index Management
Go to Indexes tab.
Create an index on department and salary.
Observe how indexing affects performance (for filtering/sorting).

ANS:
1.Create Index:
Click Create Index → Select department and salary fields → Choose ascending/descending order.
{ "department": 1, "salary": -1 }
2.Observation:
Indexes improve query performance by allowing faster lookups.   
Use Explain Plan to see how the index improves query performance.   

